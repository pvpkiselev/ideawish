generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  nick          String    @unique
  email         String    @unique
  name          String?
  password      String?
  emailVerified DateTime? @map("email_verified")
  image         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts Account[]
  sessions Session[]

  ideas Idea[]

  ideasLikes IdeaLike[]

  permissions UserPermission[]

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token") @db.Text
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

enum UserPermission {
  BLOCK_IDEAS
  ALL
}

model Idea {
  id           String @id @default(uuid())
  nick         String @unique
  serialNumber Int    @unique @default(autoincrement())
  name         String
  description  String
  text         String

  createdAt DateTime @default(now())

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  ideasLikes IdeaLike[]

  blockedAt DateTime?
}

model IdeaLike {
  id String @id @default(uuid())

  createdAt DateTime @default(now())

  idea   Idea   @relation(fields: [ideaId], references: [id])
  ideaId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([ideaId, userId])
}
